from scipy.optimize import linprog
import sympy
import math
import numpy

def add_one_two(Link_Flow):
    New_Flow=[]
    for i in range(0,len(cmax)):
        New_Flow.append(Link_Flow[i]+Link_Flow[19+i])
    return numpy.array(New_Flow)

cmax = [900,700,700,900,800,600,900,500,300,400,700,700,600,700,700,700,300,700,700]
t0 = [7,8,9,14,5,9,5,13,5,9,10,10,9,8,9,8,7,15,11]
A=[[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [1,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,1,0,1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,1,0,-1,-1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,1,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,-1,-1,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0,0,0,0,1,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,-1,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,0,0,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,1,0],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0]]
b=[1200,0,0,0,0,0,0,0,0,0,0,800,400,0,800,0,0,0,0,0,0,0,0,0,200,600]
p=[[2,0.9,0.1,1.2,1.3,0.6,0.8,0,1.4,5.3,4.4,0.4,3.7,0.5,0.3,0.9,0,1.0,2.4,2.0,0.9,0.1,1.2,1.3,0.6,0.8,0,1.4,5.3,4.4,0.4,3.7,0.5,0.3,0.9,0,1.0,2.4]]
q=[13906]
Random_Index=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
res=linprog(c=Random_Index,A_eq=A,b_eq=b,A_ub=p,b_ub=q,bounds=(0,None))
Initial_Value=res.x
Link_Flow_0 = add_one_two(Initial_Value)
error_value=10
e=10**(-3)
lamda = sympy.Symbol('lamda')
while(error_value>e):
    Optimize_Index = []
    for i in range(0,len(cmax)):
        Optimize_Index.append(t0[i]*(1+0.15*((Link_Flow_0[i])/cmax[i])**4))
    res = linprog(c=Optimize_Index*2,A_eq=A,b_eq=b,A_ub=p,b_ub=q,bounds=(0,None))
    Next_result=res.x
    Link_Flow_1=add_one_two(Next_result)
    Difference = Link_Flow_1-Link_Flow_0
    Link_Flow_2=Link_Flow_0+lamda*Difference
    Function=[]
    for i in range(0,len(cmax)):
        Function.append(Difference[i]*t0[i]*(1+0.15*(Link_Flow_2[i]/cmax[i])**4))
    possible_value=sympy.solve(sum(Function))
    lamda_value=[]
    for i in possible_value:
        try :
            i=float(i)
            if i>0 and i<1:
                lamda_value.append(i)
        except:
            continue
    Link_Flow_0=Link_Flow_0+lamda_value[0]*Difference
    print(Link_Flow_0)
    error_value=math.sqrt(sum((lamda_value[0]*Difference)**2))/(Link_Flow_0).sum()
    print(error_value)
print(Link_Flow_0)

